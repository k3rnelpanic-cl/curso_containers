// LAB - Custody microservice gRPC

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: system/custody/custody.proto

package custody

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustodyService_AddCustodyStock_FullMethodName = "/lab.system.custody.CustodyService/AddCustodyStock"
	CustodyService_ClosePeriod_FullMethodName     = "/lab.system.custody.CustodyService/ClosePeriod"
	CustodyService_GetCustody_FullMethodName      = "/lab.system.custody.CustodyService/GetCustody"
)

// CustodyServiceClient is the client API for CustodyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustodyServiceClient interface {
	AddCustodyStock(ctx context.Context, in *CustodyAdd, opts ...grpc.CallOption) (*Empty, error)
	ClosePeriod(ctx context.Context, in *CloseFilters, opts ...grpc.CallOption) (*Empty, error)
	GetCustody(ctx context.Context, in *CustodyFilter, opts ...grpc.CallOption) (*Custodies, error)
}

type custodyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustodyServiceClient(cc grpc.ClientConnInterface) CustodyServiceClient {
	return &custodyServiceClient{cc}
}

func (c *custodyServiceClient) AddCustodyStock(ctx context.Context, in *CustodyAdd, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, CustodyService_AddCustodyStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *custodyServiceClient) ClosePeriod(ctx context.Context, in *CloseFilters, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, CustodyService_ClosePeriod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *custodyServiceClient) GetCustody(ctx context.Context, in *CustodyFilter, opts ...grpc.CallOption) (*Custodies, error) {
	out := new(Custodies)
	err := c.cc.Invoke(ctx, CustodyService_GetCustody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustodyServiceServer is the server API for CustodyService service.
// All implementations should embed UnimplementedCustodyServiceServer
// for forward compatibility
type CustodyServiceServer interface {
	AddCustodyStock(context.Context, *CustodyAdd) (*Empty, error)
	ClosePeriod(context.Context, *CloseFilters) (*Empty, error)
	GetCustody(context.Context, *CustodyFilter) (*Custodies, error)
}

// UnimplementedCustodyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCustodyServiceServer struct {
}

func (UnimplementedCustodyServiceServer) AddCustodyStock(context.Context, *CustodyAdd) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustodyStock not implemented")
}
func (UnimplementedCustodyServiceServer) ClosePeriod(context.Context, *CloseFilters) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePeriod not implemented")
}
func (UnimplementedCustodyServiceServer) GetCustody(context.Context, *CustodyFilter) (*Custodies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustody not implemented")
}

// UnsafeCustodyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustodyServiceServer will
// result in compilation errors.
type UnsafeCustodyServiceServer interface {
	mustEmbedUnimplementedCustodyServiceServer()
}

func RegisterCustodyServiceServer(s grpc.ServiceRegistrar, srv CustodyServiceServer) {
	s.RegisterService(&CustodyService_ServiceDesc, srv)
}

func _CustodyService_AddCustodyStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustodyAdd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustodyServiceServer).AddCustodyStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustodyService_AddCustodyStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustodyServiceServer).AddCustodyStock(ctx, req.(*CustodyAdd))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustodyService_ClosePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustodyServiceServer).ClosePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustodyService_ClosePeriod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustodyServiceServer).ClosePeriod(ctx, req.(*CloseFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustodyService_GetCustody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustodyFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustodyServiceServer).GetCustody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustodyService_GetCustody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustodyServiceServer).GetCustody(ctx, req.(*CustodyFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// CustodyService_ServiceDesc is the grpc.ServiceDesc for CustodyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustodyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lab.system.custody.CustodyService",
	HandlerType: (*CustodyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCustodyStock",
			Handler:    _CustodyService_AddCustodyStock_Handler,
		},
		{
			MethodName: "ClosePeriod",
			Handler:    _CustodyService_ClosePeriod_Handler,
		},
		{
			MethodName: "GetCustody",
			Handler:    _CustodyService_GetCustody_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system/custody/custody.proto",
}
